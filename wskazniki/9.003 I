#include <iostream>
#include <time.h>

using namespace std;


//9.003 Proszę napisać funkcję scalającą dwie posortowane listy w jedną posortowaną listę. Do funkcji należy przekazać
//wskazania na pierwsze elementy obu list, funkcja powinna zwrócić wskazanie do scalonej listy.

//Iteracyjnie

struct node{
    int w;
    node *next;
};

void insert_first(node *&head, int wart){
    
    if(head==NULL){
        node *dodaj=new node;
        dodaj->w=wart;
        dodaj->next=NULL;
        head=dodaj;
        return;
    }
    
    node *dodaj=new node;
    dodaj->w=wart;
    dodaj->next=head;
    head=dodaj;
}

void create(node *&head, int dlugosc){
    for(int i=10+dlugosc; i>10; i-=3){
        insert_first(head,i);
    }
    
}

void insert_last(node *&head, int wart){
    
    if(head==NULL){
        node *dodaj=new node;
        dodaj->w=wart;
        dodaj->next=NULL;
        head=dodaj;
        return;
    }
    
    node *h=head;
    while(h->next!=NULL){
        h=h->next;
    }
    
    
    node *dodaj=new node;
    dodaj->w=wart;
    dodaj->next=NULL;
    h->next=dodaj;
    
    
}

node *scal(node *l1, node *l2){
    
    
    node *nowa=NULL;
    
    while(l1!=NULL && l2!=NULL){
        
        if(l1->w<l2->w){
            insert_last(nowa,l1->w);
            l1=l1->next;
        }
        else{
            insert_last(nowa,l2->w);
            l2=l2->next;
        }
        
    }
    
    while(l1!=NULL){
        insert_last(nowa,l1->w);
        l1=l1->next;
    }
    
    while(l2!=NULL){
        insert_last(nowa,l2->w);
        l2=l2->next;
    }
    
    return nowa;   
}









int main(){
    
   node *l1=NULL;
   
   create(l1,25);
   
   node *h=l1;
   
   while(h!=NULL){
       cout<<h->w<<" ";
       h=h->next;
   }
   cout<<endl;
   
  
  node *l2=NULL;
  create(l2,28);
  
  h=l2;
   
   while(h!=NULL){
       cout<<h->w<<" ";
       h=h->next;
   }
   cout<<endl;
  
  
  node *nowa=scal(l1,l2);
  
  
  
  h=nowa;
   
   while(h!=NULL){
       cout<<h->w<<" ";
       h=h->next;
   }
   cout<<endl;
  
  
    
}












